// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NatureBlog.Infrastructure;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20221213102636_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DestinationUser", b =>
                {
                    b.Property<int>("VisitedDestinationsId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorsId")
                        .HasColumnType("int");

                    b.HasKey("VisitedDestinationsId", "VisitorsId");

                    b.HasIndex("VisitorsId");

                    b.ToTable("DestinationUser");
                });

            modelBuilder.Entity("NatureBlog.Domain.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DestinationId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("NatureBlog.Domain.Models.Destination", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("CreatorId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(560)
                        .HasColumnType("nvarchar(560)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int?>("RatingScore")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("RegionId");

                    b.ToTable("Destination", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("NatureBlog.Domain.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("UserId");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("NatureBlog.Domain.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cordinates")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Region", (string)null);
                });

            modelBuilder.Entity("NatureBlog.Domain.Models.User", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(161)
                        .HasColumnType("nvarchar(161)");

                    b.Property<int>("HikingSkill")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("NatureBlog.Domain.Models.HikingTrail", b =>
                {
                    b.HasBaseType("NatureBlog.Domain.Models.Destination");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<int>("HikingDuration")
                        .HasColumnType("int");

                    b.ToTable("HikingTrail", (string)null);
                });

            modelBuilder.Entity("NatureBlog.Domain.Models.Park", b =>
                {
                    b.HasBaseType("NatureBlog.Domain.Models.Destination");

                    b.Property<bool>("HasPlayground")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDogFriendly")
                        .HasColumnType("bit");

                    b.ToTable("Park", (string)null);
                });

            modelBuilder.Entity("NatureBlog.Domain.Models.Seaside", b =>
                {
                    b.HasBaseType("NatureBlog.Domain.Models.Destination");

                    b.Property<bool>("IsGuarded")
                        .HasColumnType("bit");

                    b.Property<bool>("OffersUmbrella")
                        .HasColumnType("bit");

                    b.Property<double>("UmbrellaPrice")
                        .HasColumnType("float");

                    b.ToTable("Seaside", (string)null);
                });

            modelBuilder.Entity("DestinationUser", b =>
                {
                    b.HasOne("NatureBlog.Domain.Models.Destination", null)
                        .WithMany()
                        .HasForeignKey("VisitedDestinationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NatureBlog.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("VisitorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NatureBlog.Domain.Models.Comment", b =>
                {
                    b.HasOne("NatureBlog.Domain.Models.User", "Creator")
                        .WithMany("Comments")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NatureBlog.Domain.Models.Destination", "Destination")
                        .WithMany("Comments")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("NatureBlog.Domain.Models.Destination", b =>
                {
                    b.HasOne("NatureBlog.Domain.Models.User", "Creator")
                        .WithMany("CreatedDestinations")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NatureBlog.Domain.Models.Region", "Region")
                        .WithMany("Destinations")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("NatureBlog.Domain.Models.Rating", b =>
                {
                    b.HasOne("NatureBlog.Domain.Models.Destination", "Destination")
                        .WithMany("Ratings")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NatureBlog.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NatureBlog.Domain.Models.HikingTrail", b =>
                {
                    b.HasOne("NatureBlog.Domain.Models.Destination", null)
                        .WithOne()
                        .HasForeignKey("NatureBlog.Domain.Models.HikingTrail", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NatureBlog.Domain.Models.Park", b =>
                {
                    b.HasOne("NatureBlog.Domain.Models.Destination", null)
                        .WithOne()
                        .HasForeignKey("NatureBlog.Domain.Models.Park", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NatureBlog.Domain.Models.Seaside", b =>
                {
                    b.HasOne("NatureBlog.Domain.Models.Destination", null)
                        .WithOne()
                        .HasForeignKey("NatureBlog.Domain.Models.Seaside", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NatureBlog.Domain.Models.Destination", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("NatureBlog.Domain.Models.Region", b =>
                {
                    b.Navigation("Destinations");
                });

            modelBuilder.Entity("NatureBlog.Domain.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CreatedDestinations");
                });
#pragma warning restore 612, 618
        }
    }
}
